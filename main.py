import inspect
import logging
import os.path
import time
from datetime import datetime

import asyncpg
from email_validator import validate_email, EmailNotValidError

import config
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ParseMode
from aiogram.utils import executor
from database import create_pool, add_user, get_user

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, filename='bot.log')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=config.BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

pool = None
main_menu_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
main_menu_keyboard.add("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")


async def on_startup(dp):
    print(f"{inspect.currentframe().f_code.co_name}")
    global pool
    pool = await create_pool()


# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
class Form(StatesGroup):
    email = State()  # —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è email
    category = State()  # —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands='start', state='*')
async def cmd_start(message: types.Message):
    print(f"{inspect.currentframe().f_code.co_name}")
    user_id = message.from_user.id  # –ü–æ–ª—É—á–µ–Ω–∏–µ user_id –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è

    async with pool.acquire() as conn:
        user_data = await get_user(conn, user_id)

    if user_data:
        await message.reply(f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, {message.from_user.first_name}!", reply_markup=main_menu_keyboard)
    else:
        await Form.email.set()  # –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –∏–º–µ–Ω–∏
        await message.reply(
            f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, {message.from_user.first_name}! –ù–∞–ø–∏—à–∏ —Å–≤–æ–π email –¥–ª—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")  # –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ email
@dp.message_handler(state=Form.email, content_types=types.ContentTypes.TEXT)
async def process_email(message: types.Message, state: FSMContext):
    print(f"{inspect.currentframe().f_code.co_name}")
    email = message.text
    try:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è email
        v = validate_email(email)
        valid_email = v.email
    except EmailNotValidError as error:
        await message.reply("–í–≤–µ–¥–µ–Ω–Ω—ã–π email –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return
    await Form.category.set()  # –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    await state.update_data(email=valid_email)  # —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ email
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user_data = await state.get_data()
    user_id = message.from_user.id
    first_name = message.from_user.first_name  # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    last_name = message.from_user.last_name
    email = user_data.get("email")  # –ü–æ–ª—É—á–µ–Ω–∏–µ email –∏–∑ FSM
    date = message.date
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    async with pool.acquire() as conn:
        await add_user(conn, user_id=user_id,
                       first_name=first_name,
                       last_name=last_name,
                       email=email,
                       registration_date=date)
    await message.reply(f"{message.from_user.first_name}, —Ç–≤–æ—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!",
                        reply_markup=main_menu_keyboard)
    await state.finish()  # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ FSM —Å–µ—Å—Å–∏–∏


@dp.message_handler(lambda message: message.text == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def show_main_menu(message: types.Message):
    print(f"{inspect.currentframe().f_code.co_name}")
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("–ú–æ–∏ —É—Å–ª—É–≥–∏", callback_data='services'),
        types.InlineKeyboardButton("–í—ã–∫—É–ø —Ç–æ–≤–∞—Ä–∞", callback_data='buy_goods'),
        types.InlineKeyboardButton("–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è", callback_data='training'),
        types.InlineKeyboardButton("–ü–æ–ª–µ–∑–Ω–æ–µ", callback_data='useful'),
        types.InlineKeyboardButton("–ü–æ–¥–∞—Ä–æ—á–∫–∏", callback_data='gifts'),
    )

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
    await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª:", reply_markup=markup)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@dp.callback_query_handler(lambda c: c.data in ['services', 'buy_goods', 'training', 'useful', 'gifts'], state='*')
async def process_main_category(call: types.CallbackQuery, state: FSMContext):
    print(f"{inspect.currentframe().f_code.co_name}")
    await call.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–∞–∑–¥–µ–ª.")  # –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞
    await state.finish()  # –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –±–æ—Ç–∞

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if call.data == 'services':
        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton("1 –ü–æ–∏—Å–∫ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –∏ —Ç–æ–≤–∞—Ä–æ–≤", callback_data='find_suppliers'),
            types.InlineKeyboardButton("2 –ê–≥–µ–Ω—Ç –ø–æ –∑–∞–∫—É–ø–∫–∞–º", callback_data='purchase_agent'),
            types.InlineKeyboardButton("3 –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–±—Ä–∏–∫–∏", callback_data='factory_check'),
            types.InlineKeyboardButton("4 –î–æ—Å—Ç–∞–≤–∫–∞ –∏ —Ç–∞–º–æ–∂–µ–Ω–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ", callback_data='customs'),
            types.InlineKeyboardButton("5 –ë—Ä–µ–Ω–¥ –ø–æ–¥ –∫–ª—é—á", callback_data='turnkey_brand'),
        )
        await bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=markup)

    elif call.data == 'buy_goods':
        await bot.send_message(chat_id=call.message.chat.id, text=
        f'''
                –ï—Å–ª–∏ –≤—ã —É–∂–µ –Ω–∞—à–ª–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞, –Ω–æ –±–æ–∏—Ç–µ—Å—å –∑–∞–∫—É–ø–∞—Ç—å —É –Ω–µ–≥–æ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –∏ –≤–∞–º –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å –∞–≥–µ–Ω—Ç–∞ –≤ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–∏ —Å–¥–µ–ª–∫–∏ –ø–æ–¥ –∫–ª—é—á, —Ç–æ –≤ —ç—Ç–æ–º –º—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ–º –≤–∞–º –ø–æ–º–æ—á—å.
                –î–ª—è —ç—Ç–æ–≥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Å—Ç—É—é —Ñ–æ—Ä–º—É –∑–∞–ø—Ä–æ—Å–∞, *–º—ã —Å–≤—è–∂–µ–º—Å—è —Å –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–º –∏ –æ—Ä–≥–∞–Ω–∏–∑—É–µ–º –∑–∞–∫—É–ø–∫—É —Ç–æ–≤–∞—Ä–∞*.
                
                –ö–∞–∫ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø—Ä–æ—Ü–µ—Å—Å: 
                - –º—ã –æ—Ñ–æ—Ä–º–ª—è–µ–º –∑–∞–∫–∞–∑ –æ—Ç –∏–º–µ–Ω–∏ –∫–∏—Ç–∞–π—Å–∫–æ–π –∫–æ–º–ø–∞–Ω–∏–∏
                - –ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –æ–ø–ª–∞—Ç—É –ø–æ—Å—Ç–∞–≤—â–∏–∫—É
                - –ø—Ä–∏–Ω–∏–º–∞–µ–º —Ç–æ–≤–∞—Ä –Ω–∞ –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω–æ–º —Å–∫–ª–∞–¥–µ, –¥–µ–ª–∞–µ–º –≤–∞–º —Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ —Ç–æ–≤–∞—Ä–∞ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
                - —É–ø–∞–∫–æ–≤—ã–≤–∞–µ–º
                - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–º –≤–∞–º–∏ —Å–ø–æ—Å–æ–±–æ–º
                –ú—ã –±–µ—Ä–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –∏ –µ–≥–æ –æ–±—ä–µ–º–∞
                
                –î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ *–∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ* –º–Ω–µ.:
                üëáüëáüëá
                
                {config.BUY_GOODS_FORM}
                ''',
                               parse_mode=types.ParseMode.MARKDOWN)

    elif call.data == 'training':
        await bot.send_message(chat_id=call.message.chat.id, text=
        f'''
        *–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ –∑–∞–∫—É–ø–∫–∞–º —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –ö–∏—Ç–∞—è*

        *–ö–æ–º—É –ø–æ–¥—Ö–æ–¥–∏—Ç:*
        –¢–µ–º –∫—Ç–æ —Ö–æ—á–µ—Ç –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç–∞—Ç—å —Å –ö–∏—Ç–∞–µ–º, –Ω–æ –Ω–µ –∑–Ω–∞–µ—Ç —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å –∏ –∫—É–¥–∞ –¥–≤–∏–≥–∞—Ç—å—Å—è
        
        *–§–æ—Ä–º–∞—Ç:*
        –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –≤ –∑—É–º–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é 3-4 —á–∞—Å–∞
        –ü–æ—Å–ª–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —É –≤–∞—Å –±—É–¥–µ—Ç –∑–∞–ø–∏—Å—å –∏ —Ñ–∞–π–ª —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
        
        *–ü–ª–∞–Ω —Ä–∞–±–æ—Ç:*
        –í—ã –ø—Ä–∏—Ö–æ–¥–∏—Ç–µ —Å–æ —Å–ø–∏—Å–∫–æ–º —Ç–æ–≤–∞—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–µ–ª–∏ –±—ã –∑–∞–∫—É–ø–∞—Ç—å. –ú—ã —Å –≤–∞–º–∏ –≤–º–µ—Å—Ç–µ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏ –ø–æ—Å—á–∏—Ç–∞–µ–º –±—É–¥–µ—Ç –ª–∏ –≤—ã–≥–æ–¥–Ω–æ –∏—Ö –Ω–∞—á–∏–Ω–∞—Ç—å –∑–∞–∫—É–ø–∞—Ç—å.
        
        –ü–æ—Å—á–∏—Ç–∞–µ–º —Ç–∞—Ä–≥–µ—Ç –ø—Ä–∞–π—Å (–ø–æ –∫–∞–∫–æ–π —Ü–µ–Ω–µ –≤—ã–≥–æ–¥–Ω–æ –±—É–¥–µ—Ç –∑–∞–∫—É–ø–∞—Ç—å —Ç–æ–≤–∞—Ä), –∞ —Ç–∞–∫–∂–µ –∫–∞–∫–æ–π –±—é–¥–∂–µ—Ç –Ω—É–∂–µ–Ω –¥–ª—è –∑–∞–∫—É–ø–∫–∏ –ø–µ—Ä–≤–æ–π –ø–∞—Ä—Ç–∏–∏ —Ç–æ–≤–∞—Ä–∞, –∞ —Ç–∞–∫–∂–µ –∫–∞–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –≤–∞–º –Ω—É–∂–Ω–æ –∑–∞–∫—É–ø–∏—Ç—å –¥–ª—è —Å—Ç–∞—Ä—Ç–∞.
        
        - –ù–∞–π–¥–µ–º –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –∏ –ø—Ä–æ–≤–µ—Ä–∏–º —Ü–µ–Ω—ã. 
        
        - –ü—Ä–æ–¥—É–º–∞–µ–º –≤–∞—à—É —É–ø–∞–∫–æ–≤–∫—É –∏ –ø–æ—Å—á–∏—Ç–∞–µ–º –ø—Ä–∏–º–µ—Ä–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å.
        
        - –ü–æ—Å—á–∏—Ç–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ 
        
        + –†–∞—Å—Å–º–æ—Ç—Ä–∏–º –≤—Å—é —Å—Ö–µ–º—É –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –∫–∏—Ç–∞–π—Å–∫–∏–º–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º–∏, –∫–∞–∫ –∑–∞–∫–∞–∑—ã–≤–∞—Ç—å, –∫–∞–∫ –≤–µ–∑—Ç–∏ —Ç–æ–≤–∞—Ä –∏ —Ç.–¥.
        –ß—Ç–æ –¥–µ–ª–∞—Ç—å –≤ —Å–ª—É—á–∞–µ –±—Ä–∞–∫–∞, –∫–∞–∫ –∏–∑–±–µ–∂–∞—Ç—å –±—Ä–∞–∫–∞
        
        –°–ª–µ–¥—É—é—â–∏–π —Å–æ–∑–≤–æ–Ω —á–µ—Ä–µ–∑ —Ç—Ä–∏ –¥–Ω—è –∏ –º—ã –æ–±—Å—É–∂–¥–∞–µ–º –≤–∞—à–∏ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –≤–æ–ø—Ä–æ—Å—ã. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –Ω–µ–¥–µ–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º–µ.
        
        *–°—Ç–æ–∏–º–æ—Å—Ç—å 28888 —Ä—É–±*
        *–ó–∞–ø–∏—Å–∞—Ç—å—Å—è: @ultra_kawaii*
        ''',
                               parse_mode=types.ParseMode.MARKDOWN)

    elif call.data == 'useful':
        await bot.send_message(chat_id=call.message.chat.id,
                               text=
                               f'''
                               https://t.me/moanna_yiwu
                        
                               https://instagram.com/ultra_kawaii
                               ''',
                               parse_mode=types.ParseMode.MARKDOWN)

    elif call.data == 'gifts':
        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton("–†–∞–±–æ—á–∞—è —Ç–µ—Ç—Ä–∞–¥—å –∫–∞–∫–æ–π —Ç–æ–≤–∞—Ä –≤–µ–∑—Ç–∏ –∏–∑ –ö–∏—Ç–∞—è", callback_data='workbook'),
            types.InlineKeyboardButton("–í–≤–æ–¥–Ω–∞—è –ª–µ–∫—Ü–∏—è", callback_data='intro_lecture')
        )
        await bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∞—Ä–æ–∫:", reply_markup=markup)


@dp.callback_query_handler(
    lambda c: c.data in ['find_suppliers', 'purchase_agent', 'factory_check', 'customs', 'turnkey_brand'])
async def process_services_sub_category(call: types.CallbackQuery):
    print(f"{inspect.currentframe().f_code.co_name}")
    await call.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é.")  # –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞

    if call.data == 'find_suppliers':
        await bot.send_message(call.message.chat.id, "–§–æ—Ä–º–∞ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –∏ —Ç–æ–≤–∞—Ä–æ–≤. –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")
    elif call.data == 'purchase_agent':
        await bot.send_message(chat_id=call.message.chat.id, text=
        f'''
        –ö–∞–∫ –∞–≥–µ–Ω—Ç –ø–æ –∑–∞–∫—É–ø–∫–∞–º –≤ –ö–∏—Ç–∞–µ, —è –º–æ–≥—É –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –≤–∞–º —Å–ª–µ–¥—É—é—â–∏–µ —É—Å–ª—É–≥–∏, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞ –æ–±–ª–µ–≥—á–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–∫—É–ø–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –∏ —É—Å–ª—É–≥ –æ—Ç –∫–∏—Ç–∞–π—Å–∫–∏—Ö –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π –∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤:

        1. *–ü–æ–∏—Å–∫* –Ω–∞–¥—ë–∂–Ω—ã—Ö –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π –∏–ª–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
        2. *–ú—ã –ø—Ä–æ–≤–æ–¥–∏–º –ø–µ—Ä–µ–≥–æ–≤–æ—Ä—ã* –æ —Ü–µ–Ω–∞—Ö, —É—Å–ª–æ–≤–∏—è—Ö –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ –¥—Ä—É–≥–∏—Ö –¥–µ—Ç–∞–ª—è—Ö —Å–¥–µ–ª–∫–∏
        3. *–ö–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞* –ø—Ä–æ–¥—É–∫—Ü–∏–∏ –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —ç—Ç–∞–ø–∞—Ö –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞
        4. *–õ–æ–≥–∏—Å—Ç–∏–∫–∞*: –≤—ã–±–æ—Ä –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞ –∏ —Å–ø–æ—Å–æ–±–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –æ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è –¥–æ –≤–∞—à–µ–≥–æ —Å–∫–ª–∞–¥–∞
        5. *–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è*: –ü–æ–º–æ—â—å –≤ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ç–∞–º–æ–∂–µ–Ω–Ω—ã—Ö –∏ —ç–∫—Å–ø–æ—Ä—Ç–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        6. *–ë—Ä–µ–Ω–¥ –ø–æ–¥ –∫–ª—é—á* - –º—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é –±–µ—Ä–µ–º –Ω–∞ —Å–µ–±—è –≤—Å—é —Ä–∞–±–æ—Ç—É –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é —Ç–æ–≤–∞—Ä–∞ –ø–æ–¥ –≤–∞—à–∏–º –±—Ä–µ–Ω–¥–æ–º
        
        –ú–æ–π —Å–µ—Ä–≤–∏—Å –æ—Å–æ–±–µ–Ω–Ω–æ –ø–æ–ª–µ–∑–µ–Ω –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–π, –Ω–µ –∏–º–µ—é—â–∏—Ö –æ–ø—ã—Ç–∞ —Ä–∞–±–æ—Ç—ã —Å –∫–∏—Ç–∞–π—Å–∫–∏–º–∏ —Ä—ã–Ω–∫–∞–º–∏ –∏–ª–∏ –∂–µ–ª–∞—é—â–∏—Ö —Å—ç–∫–æ–Ω–æ–º–∏—Ç—å –≤—Ä–µ–º—è –∏ —Ä–µ—Å—É—Ä—Å—ã.
        
        –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å–æ –º–Ω–æ–π, *–∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ* –º–Ω–µ.
        üëáüëáüëá
        
        {config.REQUEST_FORM}
        ''',
                               parse_mode=types.ParseMode.MARKDOWN)
    elif call.data == 'factory_check':
        await bot.send_message(call.message.chat.id, "–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–±—Ä–∏–∫–∏. –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")
    elif call.data == 'customs':
        await bot.send_message(call.message.chat.id, "–û–ø–∏—Å–∞–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ —Ç–∞–º–æ–∂–µ–Ω–Ω–æ–≥–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è. –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")
    elif call.data == 'turnkey_brand':
        await bot.send_message(call.message.chat.id, "–û–ø–∏—Å–∞–Ω–∏–µ —É—Å–ª—É–≥–∏ '–ë—Ä–µ–Ω–¥ –ø–æ–¥ –∫–ª—é—á'. –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")


@dp.callback_query_handler(
    lambda c: c.data in ['express_consultation', 'personal_session', 'big_consultation', 'mentorship'])
async def process_training_sub_category(call: types.CallbackQuery):
    print(f"{inspect.currentframe().f_code.co_name}")
    await call.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ –≤–∏–¥ –æ–±—É—á–µ–Ω–∏—è.")  # –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞

    if call.data == 'express_consultation':
        await bot.send_message(call.message.chat.id, "–ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≠–∫—Å–ø—Ä–µ—Å—Å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏...")
    elif call.data == 'personal_session':
        await bot.send_message(call.message.chat.id, "–ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π —Å–µ—Å—Å–∏–∏...")
    elif call.data == 'big_consultation':
        await bot.send_message(call.message.chat.id, "–ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ë–æ–ª—å—à–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏...")
    elif call.data == 'mentorship':
        await bot.send_message(call.message.chat.id, "–ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ù–∞—Å—Ç–∞–≤–Ω–∏—á–µ—Å—Ç–≤–∞...")


@dp.callback_query_handler(lambda c: c.data in ['workbook', 'intro_lecture'])
async def process_gifts_sub_category(call: types.CallbackQuery):
    print(f"{inspect.currentframe().f_code.co_name}")
    await call.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–¥–∞—Ä–æ–∫.")  # –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞

    if call.data == 'workbook':
        await bot.send_message(call.message.chat.id, "–°–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞")
    elif call.data == 'intro_lecture':
        await bot.send_message(call.message.chat.id, f"{config.INTRO_LECTURE}")


@dp.callback_query_handler(lambda c: c.data == 'minicourse_lectures')
async def process_minicourse_sub_category(call: types.CallbackQuery):
    print(f"{inspect.currentframe().f_code.co_name}")
    await call.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ –º–∏–Ω–∏-–∫—É—Ä—Å.")  # –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞
    await bot.send_message(call.message.chat.id,
                           "–ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ '–ó–∞–ø–∏—Å—å –∫—É—Ä—Å–∞ –ª–µ–∫—Ü–∏–π –ø–æ –∑–∞–∫—É–ø–∫–∞–º —Ç–æ–≤–∞—Ä–æ–≤ –≤ –ö–∏—Ç–∞–µ –±–µ–∑ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ 6888 "
                           "—Ä—É–±'...")


@dp.message_handler(content_types=types.ContentType.DOCUMENT)
async def handle_docs(message: types.Message):
    print(f"{inspect.currentframe().f_code.co_name}")
    file_id = message.document.file_id
    file_name = message.document.file_name

    if '.xls' not in str(file_name) and '.xlsx' not in str(file_name):
        await message.reply(
            f"–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –ø—Ä–∏–Ω—è—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç .xls –∏–ª–∏ .xlsx")
        return
    await message.reply(
        f"–î–æ–∫—É–º–µ–Ω—Ç –ø—Ä–∏–Ω—è—Ç. –û–Ω –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É. –ú—ã —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è")

    # –£–¥–æ—Å—Ç–æ–≤–µ—Ä—å—Ç–µ—Å—å, —á—Ç–æ –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if not os.path.exists(config.FILEPATH_REQUEST_FORMS):
        os.makedirs(config.FILEPATH_REQUEST_FORMS)

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
    file_path = await bot.get_file(file_id=file_id)
    await bot.download_file(file_path=file_path.file_path,
                            destination=os.path.join(config.FILEPATH_REQUEST_FORMS,
                                                     f"{message.from_user.last_name}_{message.from_user.id}_{datetime.now().strftime('%d-%m-%Y %H-%M-%S')}_{file_name}"))
    username = ''
    try:
        username = message.from_user.username
    except:
        pass

    user_mention = f"@{username}"
    user_id = message.from_user.id  # –ü–æ–ª—É—á–µ–Ω–∏–µ user_id –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è

    async with pool.acquire() as conn:
        user_data = await get_user(conn, user_id)

    await bot.send_message(chat_id=config.ADMIN_ID, text=f'''
    –ü—Ä–∏–Ω—è—Ç –¥–æ–∫—É–º–µ–Ω—Ç –æ—Ç {message.from_user.first_name} {message.from_user.last_name}
    username: {user_mention}
    email: {user_data['email']}
    ''')
    await bot.send_document(chat_id=config.ADMIN_ID, document=file_id)
    await bot.send_message(chat_id=config.ADMIN_2_ID, text=f'''
    –ü—Ä–∏–Ω—è—Ç –¥–æ–∫—É–º–µ–Ω—Ç –æ—Ç {message.from_user.first_name} {message.from_user.last_name}
    username: {user_mention}
    email: {user_data['email']}
    ''')
    await bot.send_document(chat_id=config.ADMIN_2_ID, document=file_id)


@dp.message_handler(lambda message: message.text.startswith('/'), state="*")
async def unknown_command(message: types.Message, state: FSMContext):
    print(f"{inspect.currentframe().f_code.co_name}")
    await message.reply("–ò–∑–≤–∏–Ω–∏, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –Ø –∂–µ –ø—Ä–æ—Å—Ç–æ –±–æ—Ç. "
                        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π –æ–¥–Ω—É –∏–∑ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –º–Ω–µ –∫–æ–º–∞–Ω–¥.",
                        reply_markup=main_menu_keyboard)
    await state.finish()  # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ FSM —Å–µ—Å—Å–∏–∏


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    executor.start_polling(dp, on_startup=on_startup, skip_updates=True)
